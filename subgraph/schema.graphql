

# type PositionAdjustmentRequestExecution @entity(immutable: true) {
#   id: Bytes!
#   account: Bytes!
#   trade: TradeLink!

#   path: [String!]!
#   indexToken: Bytes!
#   amountIn: BigInt!
#   minOut: BigInt!
#   sizeDelta: BigInt!
#   isLong: Boolean!
#   acceptablePrice: BigInt!
#   executionFee: BigInt!
#   blockGap: BigInt!
#   timeGap: BigInt!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type PositionAdjustment @entity(immutable: true) {
#   id: Bytes!
#   trade: TradeLink!
#   account: Bytes!

#   collateralToken: Bytes!
#   indexToken: Bytes!
#   isLong: Boolean!
#   key: Bytes!
#   isIncrease: Boolean!

#   collateralDelta: BigInt!
#   sizeDelta: BigInt!
#   price: BigInt!
#   fee: BigInt!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type PositionUpdate @entity(immutable: true) {
#   id: Bytes!
#   trade: TradeLink!

#   key: Bytes!

#   size: BigInt!
#   collateral: BigInt!

#   reserveAmount: BigInt!
#   realisedPnl: BigInt!
#   averagePrice: BigInt!
#   entryFundingRate: BigInt!
#   markPrice: BigInt!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type TradeLink @entity(immutable: true) {
#   id: Bytes!

#   account: Bytes!
#   collateralToken: Bytes!
#   indexToken: Bytes!
#   isLong: Boolean!
#   key: Bytes!

#   keeperAdjustList: [PositionAdjustmentRequestExecution!] @derivedFrom(field: "trade")

#   adjustList: [PositionAdjustment!] @derivedFrom(field: "trade")
#   updateList: [PositionUpdate!] @derivedFrom(field: "trade")

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }



# type PositionSettled @entity(immutable: true) {
#   id: Bytes!
#   idCount: Int!
#   link: TradeLink!

#   account: Bytes!
#   collateralToken: Bytes!
#   indexToken: Bytes!
#   isLong: Boolean!
#   key: Bytes!

#   collateral: BigInt!
#   size: BigInt!
#   averagePrice: BigInt!
#   entryFundingRate: BigInt!
#   realisedPnl: BigInt!
#   reserveAmount: BigInt!

#   cumulativeCollateral: BigInt!
#   cumulativeSize: BigInt!
#   cumulativeFee: BigInt!

#   maxCollateral: BigInt!
#   maxSize: BigInt!

#   markPrice: BigInt!
#   isLiquidated: Boolean!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type RouteRegistration @entity(immutable: true) {
#   id: Bytes!
#   trader: Bytes!
#   route: Bytes!
#   routeTypeKey: Bytes!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type PositionAdjustmentRequest @entity(immutable: true) {
#   id: Bytes!
#   caller: Bytes!
#   route: Bytes!
#   requestKey: Bytes!
#   routeTypeKey: Bytes!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type Subscribe @entity(immutable: true) {
#   id: Bytes!
#   traders: [Bytes!]!
#   allowances: [BigInt!]!
#   puppet: Bytes!
#   routeTypeKey: Bytes!
#   subscribe: Boolean!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type Transfer @entity(immutable: true) {
#   id: Bytes!
#   token: Bytes!
#   from: Bytes!
#   to: Bytes!
#   amount: BigInt!
#   amountUsd: BigInt!
  
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type AdjustmentExecution @entity(immutable: true) {
#   id: Bytes! # account + index
#   route: Bytes!

#   keeperExecution: PositionAdjustmentRequestExecution!

#   requestKey: Bytes!
#   isExecuted: Boolean!
#   isIncrease: Boolean!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type MirrorPositionSlot @entity {
#   id: Bytes!
#   trader: Bytes!
#   route: Bytes!

#   positionSlot: PositionSlot!
#   link: MirrorPositionLink!
# }

# type MirrorPositionAdjustment @entity(immutable: true) {
#   # adjustList: [MirrorPositionAdjustment!] @derivedFrom(field: "link")
#   id: Bytes!
#   tradeLink: TradeLink!
#   route: Bytes!

#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type MirrorPositionLink @entity(immutable: true) {
#   # adjustList: [MirrorPositionAdjustment!] @derivedFrom(field: "link")
#   id: Bytes!
#   tradeLink: TradeLink!
#   route: Bytes!
# }


type Route @entity(immutable: true) {
  id: Bytes!
  routeTypeKey: Bytes!
  address: Bytes!
  trader: Bytes!

  collateralToken: Bytes!
  indexToken: Bytes!
  isLong: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}


type Callback @entity(immutable: true) {
  id: Bytes!
  callbackTarget: Bytes! # address
  success: Boolean! # bool

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}



type ApprovePlugin @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  routeTypeKey: Bytes! # bytes32

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type AuthorityUpdated @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  newAuthority: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PuppetCallback @entity(immutable: true) {
  id: Bytes!
  route: Bytes! # address
  requestKey: Bytes! # bytes32
  isExecuted: Boolean! # bool
  isIncrease: Boolean! # bool

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreditPuppet @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  asset: Bytes! # address
  puppet: Bytes! # address
  caller: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type DebitPuppet @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  asset: Bytes! # address
  puppet: Bytes! # address
  caller: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type DecreaseSize @entity(immutable: true) {
  id: Bytes!
  requestKey: Bytes! # bytes32
  routeKey: Bytes! # bytes32

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  asset: Bytes! # address
  caller: Bytes! # address
  puppet: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Liquidate @entity(immutable: true) {
  id: Bytes!
  routeKey: Bytes! # bytes32

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type RegisterRoute @entity(immutable: true) {
  id: Bytes!
  trader: Bytes! # address
  route: Bytes! # address
  routeTypeKey: Bytes! # bytes32

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type RequestPositionAdjustment @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  route: Bytes! # address
  requestKey: Bytes! # bytes32
  routeTypeKey: Bytes! # bytes32

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Send @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  asset: Bytes! # address
  receiver: Bytes! # address
  caller: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type SetRouteType @entity(immutable: true) {
  id: Bytes!
  routeTypeKey: Bytes! # bytes32
  collateral: Bytes! # address
  index: Bytes! # address
  isLong: Boolean! # bool

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Subscribe @entity(immutable: true) {
  id: Bytes!
  traders: [Bytes!]! # address[]
  allowances: [BigInt!]! # uint256[]
  puppet: Bytes! # address
  routeTypeKey: Bytes! # bytes32
  subscribe: Boolean! # bool

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  asset: Bytes! # address
  receiver: Bytes! # address
  puppet: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}
