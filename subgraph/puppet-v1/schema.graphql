

type ClosePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  link: PositionLink!

  key: Bytes! # bytes32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type DecreasePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  link: PositionLink!

  account: Bytes! # address
  collateralToken: Bytes! # address
  indexToken: Bytes! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type IncreasePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  link: PositionLink!

  account: Bytes! # address
  collateralToken: Bytes! # address
  indexToken: Bytes! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type UpdatePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  link: PositionLink!

  key: Bytes! # bytes32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # int256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type LiquidatePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  link: PositionLink!

  account: Bytes! # address
  collateralToken: Bytes! # address
  indexToken: Bytes! # address
  isLong: Boolean! # bool
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  tokenIn: Bytes! # address
  tokenOut: Bytes! # address
  amountIn: BigInt! # uint256
  amountOut: BigInt! # uint256
  amountOutAfterFees: BigInt! # uint256
  feeBasisPoints: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteDecreasePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address

  path: [Bytes!]! # address[]
  indexToken: Bytes! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: Bytes! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteIncreasePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  
  path: [Bytes!]! # address[]
  indexToken: Bytes! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateDecreasePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address

  path: [Bytes!]! # address[]
  indexToken: Bytes! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: Bytes! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateIncreasePosition @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address

  path: [Bytes!]! # address[]
  indexToken: Bytes! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256
  gasPrice: BigInt! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}


# slots
type PositionSlot @entity {
  id: Bytes!
  idCount: Int!
  link: PositionLink!

  account: Bytes!
  collateralToken: Bytes!
  indexToken: Bytes!
  isLong: Boolean!
  key: Bytes!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!
}

type PositionSettled @entity(immutable: true) {
  id: Bytes!
  idCount: Int!
  link: PositionLink!

  account: Bytes!
  collateralToken: Bytes!
  indexToken: Bytes!
  isLong: Boolean!
  key: Bytes!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!

  settlePrice: BigInt!
  isLiquidated: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionLink @entity(immutable: true) {
  id: Bytes!

  account: Bytes!
  collateralToken: Bytes!
  indexToken: Bytes!
  isLong: Boolean!
  key: Bytes!

  # executeIncreaseList: [ExecuteIncreasePosition!] @derivedFrom(field: "link")
  # executeDecreaseList: [ExecuteDecreasePosition!] @derivedFrom(field: "link")

  increaseList: [IncreasePosition!] @derivedFrom(field: "link")
  decreaseList: [DecreasePosition!] @derivedFrom(field: "link")
  updateList: [UpdatePosition!] @derivedFrom(field: "link")

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}
