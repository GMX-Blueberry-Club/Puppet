
type MarketCreated @entity(immutable: true) {
  id: Bytes!
  indexToken: Bytes!
  longToken: Bytes!
  shortToken: Bytes!
  marketToken: Bytes!
  salt: Bytes!
}

type PositionLink @entity(immutable: true) {
  id: Bytes!
  key: Bytes!

  # indexToken: Bytes!
  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  isLong: Boolean!

  increaseList: [PositionIncrease!] @derivedFrom(field: "link")
  decreaseList: [PositionDecrease!] @derivedFrom(field: "link")
  feeUpdateList: [PositionFeeUpdate!] @derivedFrom(field: "link")

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionIncrease @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInTokens: BigInt!
  sizeInUsd: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  orderType: BigInt!

  collateralDeltaAmount: BigInt!
  priceImpactUsd: BigInt!
  priceImpactAmount: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionDecrease @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!

  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  borrowingFactor: BigInt!
  fundingFeeAmountPerSize: BigInt!
  longTokenClaimableFundingAmountPerSize: BigInt!
  shortTokenClaimableFundingAmountPerSize: BigInt!
  executionPrice: BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  valuesPriceImpactDiffUsd: BigInt!
  orderType: BigInt!

  priceImpactUsd: BigInt!
  basePnlUsd: BigInt!
  uncappedBasePnlUsd: BigInt!

  isLong: Boolean!

  orderKey: Bytes!
  positionKey: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionFeeUpdate @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!

  orderKey: Bytes!
  positionKey: Bytes!
  referralCode: Bytes!

  market: Bytes!
  collateralToken: Bytes!
  affiliate: Bytes!
  trader: Bytes!
  uiFeeReceiver: Bytes!

  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  tradeSizeUsd: BigInt!
  totalRebateFactor: BigInt!
  traderDiscountFactor: BigInt!
  totalRebateAmount: BigInt!
  traderDiscountAmount: BigInt!
  affiliateRewardAmount: BigInt!
  fundingFeeAmount: BigInt!
  claimableLongTokenAmount: BigInt!
  claimableShortTokenAmount: BigInt!
  latestFundingFeeAmountPerSize: BigInt!
  latestLongTokenClaimableFundingAmountPerSize: BigInt!
  latestShortTokenClaimableFundingAmountPerSize: BigInt!
  borrowingFeeUsd: BigInt!
  borrowingFeeAmount: BigInt!
  borrowingFeeReceiverFactor: BigInt!
  borrowingFeeAmountForFeeReceiver: BigInt!
  positionFeeFactor: BigInt!
  protocolFeeAmount: BigInt!
  positionFeeReceiverFactor: BigInt!
  feeReceiverAmount: BigInt!
  feeAmountForPool: BigInt!
  positionFeeAmountForPool: BigInt!
  positionFeeAmount: BigInt!
  totalCostAmount: BigInt!
  uiFeeReceiverFactor: BigInt!
  uiFeeAmount: BigInt!

  isIncrease: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionOpen @entity {
  id: Bytes!
  link: PositionLink!
  key: Bytes!

  # indexToken: Bytes!
  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  realisedPnlUsd: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeSizeToken: BigInt!
  cumulativeFeeUsd: BigInt!

  maxSizeUsd: BigInt!
  maxSizeToken: BigInt!

  isLong: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PositionSettled @entity(immutable: true) {
  id: Bytes!
  link: PositionLink!
  key: Bytes!

  # indexToken: Bytes!
  account: Bytes!
  market: Bytes!
  collateralToken: Bytes!

  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  realisedPnlUsd: BigInt!

  cumulativeSizeUsd: BigInt!
  cumulativeSizeToken: BigInt!
  cumulativeFeeUsd: BigInt!

  maxSizeUsd: BigInt!
  maxSizeToken: BigInt!

  isLong: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type PriceLatest @entity {
  id: Bytes!
  value: BigInt!
  timestamp: Int!
}

type PriceCandle @entity(immutable: true) {
  id: ID!
  token: Bytes!
  interval: Int!
  timestamp: Int!
  o: BigInt!
  h: BigInt!
  l: BigInt!
  c: BigInt!
}